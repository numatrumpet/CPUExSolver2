#ifndef _COMMON_H
#define _COMMON_H

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <unistd.h>
#include <sys/types.h>
#include <vector>
#include <map>
#define rep(i, n) for (int i = 0; i < n; i++)
#define repi(i, n) for (int i = 1; i < n; i++)
#define eq(a, b) (strcmp(a, b) == 0)

#define ROM_NUM (64 * 1024) // 64KByte
#define RAM_NUM (${config.romSize})

#define MAX_INSTS 64 // 6bit

#define INTREG_NUM (${config.intRegsNum})
#define FLOATREG_NUM (${config.floatRegsNum})

% if config.constOps is not None:
% for constNum in config.constOps:
#define ${constNum.tag} (${constNum.get("value")})
% endfor
% endif

% for inst in instInfo:
	% if config.isUse(inst["type"]):
		% if not config.getOp(inst["type"]).isalpha():
#define ${config.getName(inst["type"]).upper()} (${config.getOp(inst["type"])})
		% endif
		% if (config.getFunct(inst["type"]) is not None) and (not config.getFunct(inst["type"]).isalpha()):
#define ${config.getName(inst["type"]).upper()}_F (${config.getFunct(inst["type"])})
		% endif
	% endif
% endfor

using namespace std;
#endif
