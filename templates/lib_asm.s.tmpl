## 条件分岐は${config.getName("BLT")}, fljtは絶対あるものとする。
<%
	SPECIAL_REGS = [config.zeroReg, config.frameReg, config.heapReg, config.linkReg, config.oneReg, config.minusOneReg]
	IREGS = filter(lambda reg: reg not in SPECIAL_REGS, map(lambda i: config.r + str(i), range(int(config.intRegsNum))))
	FREGS = map(lambda i: config.f + str(i), range(int(config.floatRegsNum)))
	
	def addi(rt, rs, imm):
		if config.isUse("ADDI"):
			return "%s %s, %s, %s" % (config.getName("ADDI"), rt, rs, str(imm))
		else:
			ans = "%s %s, %s\n" % (config.getName("SETHI"), IREGS[-2], str((int(imm) >> 16) & 0xffff))
			ans += "\t%s %s, %s\n" % (config.getName("SETLO"), IREGS[-2], str(int(imm) & 0xffff))
			ans += "\t%s %s, %s, %s" % (config.getName("ADD"), rt, rs, IREGS[-2])
			return ans

	def fsub(rd, rs, rt):
		if config.isUse("FSUB"):
			return "%s %s, %s, %s" % (config.getName("FSUB"), rd, rs, rt)
		else:
			ans = "%s %s, %s\n" % (config.getName("FNEG"), FREGS[-1], rt)
			ans += "\t%s %s, %s, %s" % (config.getName("FADD"), rd, rs, FREGS[-1])
			return ans

	def fldi(rt, rs, imm):
		if config.isUse("FLDI"):
			return "%s %s, %s, %s" % (config.getName("FLDI"), rt, rs, str(imm))
		elif config.isUse("LDI") and config.isUse("IMOVF"):
			ans = "%s %s, %s, %s\n" % (config.getName("LDI"), IREGS[-2], rs, str(imm))
			ans += "\t%s %s, %s" % (config.getName("IMOVF"), rt, IREGS[-2])
			return ans
		else:
			assert False, "this architecture must support LdFi or IMovF" 

	def fsti(rt, rs, imm):
		if config.isUse("FSTI"):
			return "%s %s, %s, %s" % (config.getName("FSTI"), rt, rs, str(imm))
		elif config.isUse("STI") and config.isUse("FMOVI"):
			ans = "%s %s, %s\n" % (config.getName("FMOVI"), IREGS[-2], rt)
			ans += "\t%s %s, %s, %s" % (config.getName("STI"), IREGS[-2], rs, str(imm))
			return ans
		else:
			assert False, "this architecture must support LdFi or IMovF" 

	def fset(rs, hi, lo, ss):
		if config.isUse("FSETHI") and config.isUse("FSETLO"):
			ans = "%s %s, %s\n" % (config.getName("FSETHI"), rs, str(hi))
			ans += "\t%s %s, %s" % (config.getName("FSETLO"), rs, str(lo))
			return ans
		else:
			ans = "%s %s, %s\n" % (config.getName("SETHI"), IREGS[-2], str(hi))
			ans += "\t%s %s, %s\n" % (config.getName("SETLO"), IREGS[-2], str(lo))
			ans += "\t%s %s, %s, %s\n" % (config.getName("STI"), IREGS[-2], config.frameReg, str(ss))
			ans += "\t%s\n" % fldi(rs, config.frameReg, str(ss))
			return ans

	def call(label):
		if config.isUse("CALL") and config.isUse("CALLREG") and config.isUse("RETURN"):
			return "%s %s" % (config.getName("CALL"), label)
		else:
			assert config.isUse("JMP_LNK") and config.isUse("JMPREG_LNK"), "[call()]%s and %s must be supported." % (config.getName("JMP_LNK"), config.getName("JMPREG_LNK"))
			assert config.linkReg != r, "[_return()] config.linkReg must be one of the intRegs."
			ans = "%s %s, %s, 0\n" % (config.getName("STI"), config.linkReg, config.frameReg)
			ans += "\t" + (addi(config.frameReg, config.frameReg, -config.addressingUnit)) + "\n"
			ans += "\t%s %s\n" % (config.getName("JMP_LNK"), label)
			ans += "\t" + (addi(config.frameReg, config.frameReg, config.addressingUnit)) + "\n"
			ans += "\t%s %s, %s, 0" % (config.getName("LDI"), config.linkReg, config.frameReg)
			return ans

	def _return():
		if config.isUse("CALL") and config.isUse("CALLREG") and config.isUse("RETURN"):
			return config.getName("RETURN")
		else:
			# config.linkRegは整数レジスタの一つのはず
			# リンクレジスタの退避とかは_call()の方で都合をつける
			assert config.linkReg != r, "[_return()] config.linkReg must be one of the intRegs."
			return "%s %s" % (config.getName("JMPREG"), config.linkReg)

%>${".init_heap_size\t0" if config.constTableType != "no_use" else ""}
##FLOAT_ONE:		${config.comment} 1.0
##	.long 0x3f800000
##FLOAT_MAGICI:	${config.comment} 8388608
##	.long 0x00800000
##FLOAT_MAGICF:	${config.comment} 8388608.0
##	.long 0x4b000000
##FLOAT_MAGICFHX:	${config.comment} 1258291200
##	.long 0x4b000000
${config.comment}----------------------------------------------------------------------
${config.comment}
${config.comment} lib_asm.s
${config.comment}
${config.comment}----------------------------------------------------------------------

${config.comment} * create_array
min_caml_create_array:
% if config.isByteAddressing:
	${config.getName("SLLI")} ${IREGS[0]}, ${IREGS[0]}, 2
% endif
	${config.getName("ADD")} ${IREGS[2]}, ${IREGS[0]}, ${config.heapReg}
	${config.getName("MOV")} ${IREGS[0]}, ${config.heapReg}
CREATE_ARRAY_LOOP:
	${config.getName("BLT")}  ${config.heapReg}, ${IREGS[2]}, CREATE_ARRAY_CONTINUE
	${_return()}
CREATE_ARRAY_CONTINUE:
	${config.getName("STI")} ${IREGS[1]}, ${config.heapReg}, 0	
	${addi(config.heapReg, config.heapReg, config.addressingUnit)}	
	${config.getName("BRANCH")} CREATE_ARRAY_LOOP

${config.comment} * create_float_array
min_caml_create_float_array:
% if config.isByteAddressing:
	${config.getName("SLLI")} ${IREGS[0]}, ${IREGS[0]}, 2
% endif
	${config.getName("ADD")} ${IREGS[1]}, ${IREGS[0]}, ${config.heapReg}
	${config.getName("MOV")} ${IREGS[0]}, ${config.heapReg}
CREATE_FLOAT_ARRAY_LOOP:
	${config.getName("BLT")} ${config.heapReg}, ${IREGS[1]}, CREATE_FLOAT_ARRAY_CONTINUE
	${_return()}
CREATE_FLOAT_ARRAY_CONTINUE:
	${fsti(FREGS[0], config.heapReg, 0)}
	${addi(config.heapReg, config.heapReg, config.addressingUnit)}
	${config.getName("BRANCH")} CREATE_FLOAT_ARRAY_LOOP

${config.comment} * floor		${FREGS[0]} + MAGICF - MAGICF
min_caml_floor:
	${config.getName("FMOV")} ${FREGS[1]}, ${FREGS[0]}
	${config.comment} ${FREGS[4]} <- 0.0
	${config.comment} fset ${FREGS[4]}, 0.0
	${fset(FREGS[4], 0, 0, 0)}
	${config.getName("FBLT")} ${FREGS[0]}, ${FREGS[4]}, FLOOR_NEGATIVE	${config.comment} if (${FREGS[4]} <= ${FREGS[0]}) goto FLOOR_PISITIVE
FLOOR_POSITIVE:
	${config.comment} ${FREGS[2]} <- 8388608.0(0x4b000000)
	${fset(FREGS[2], 19200, 0, 0)}
	${config.getName("FBLT")} ${FREGS[2]}, ${FREGS[0]}, FLOOR_POSITIVE_RET
FLOOR_POSITIVE_MAIN:
	${config.getName("FMOV")} ${FREGS[1]}, ${FREGS[0]}
	${config.getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${fsti(FREGS[0], config.frameReg, 0)}
	${config.getName("LDI")} ${IREGS[1]}, ${config.frameReg}, 0
	${fsub(FREGS[0], FREGS[0], FREGS[2])}
	${fsti(FREGS[0], config.frameReg, 0)}
	${config.getName("LDI")} ${IREGS[1]}, ${config.frameReg}, 0
	${config.getName("FBLT")} ${FREGS[1]}, ${FREGS[0]}, FLOOR_POSITIVE_RET
	${_return()}
FLOOR_POSITIVE_RET:
	${config.comment} ${FREGS[3]} <- 1.0
	${config.comment} fset ${FREGS[3]}, 1.0
	${fset(FREGS[3], 16256, 0, 0)}
	${fsub(FREGS[0], FREGS[0], FREGS[3])}
	${_return()}
FLOOR_NEGATIVE:
	${config.getName("FNEG")} ${FREGS[0]}, ${FREGS[0]}
	${config.comment} ${FREGS[2]} <- 8388608.0(0x4b000000)
	${fset(FREGS[2], 19200, 0, 0)}
	${config.getName("FBLT")} ${FREGS[2]}, ${FREGS[0]}, FLOOR_NEGATIVE_RET
FLOOR_NEGATIVE_MAIN:
	${config.getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${fsub(FREGS[0], FREGS[0], FREGS[2])}
	${config.getName("FNEG")} ${FREGS[1]}, ${FREGS[1]}
	${config.getName("FBLT")} ${FREGS[0]}, ${FREGS[1]}, FLOOR_NEGATIVE_PRE_RET
	${config.getName("BRANCH")} FLOOR_NEGATIVE_RET
FLOOR_NEGATIVE_PRE_RET:
	${config.getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${config.comment} ${FREGS[3]} <- 1.0
	${config.comment} fset ${FREGS[3]}, 1.0
	${fset(FREGS[3], 16256, 0, 0)}
	${config.getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[3]}
	${fsub(FREGS[0], FREGS[0], FREGS[2])}
FLOOR_NEGATIVE_RET:
	${config.getName("FNEG")} ${FREGS[0]}, ${FREGS[0]}
	${_return()}
	
min_caml_ceil:
	${config.getName("FNEG")} ${FREGS[0]}, ${FREGS[0]}
	${call("min_caml_floor")}
	${config.getName("FNEG")} ${FREGS[0]}, ${FREGS[0]}
	${_return()}

${config.comment} * float_of_int
min_caml_float_of_int:
	${config.getName("BLT")} ${IREGS[0]}, ${config.zeroReg}, ITOF_NEGATIVE_MAIN		${config.comment} if (${config.zeroReg} <= ${IREGS[0]}) goto ITOF_MAIN
ITOF_MAIN:
	${config.comment} ${FREGS[1]} <- 8388608.0(0x4b000000)
	${fset(FREGS[1], 19200, 0, 0)}
	${config.comment} ${IREGS[1]} <- 0x4b000000
	${config.getName("SETHI")} ${IREGS[1]}, 19200
	${config.getName("SETLO")} ${IREGS[1]}, 0
	${config.comment} ${IREGS[2]} <- 0x00800000
	${config.getName("SETHI")} ${IREGS[2]}, 128
	${config.getName("SETLO")} ${IREGS[2]}, 0
	${config.getName("BLT")} ${IREGS[0]}, ${IREGS[2]}, ITOF_SMALL
ITOF_BIG:
	${config.comment} ${FREGS[2]} <- 0.0
	${config.comment} fset ${FREGS[2]}, 0.0
	${fset(FREGS[2], 0, 0, 0)}
ITOF_LOOP:
	${config.getName("SUB")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[2]}
	${config.getName("FADD")} ${FREGS[2]}, ${FREGS[2]}, ${FREGS[1]}
	${config.getName("BLT")} ${IREGS[0]}, ${IREGS[2]}, ITOF_RET
	${config.getName("BRANCH")} ITOF_LOOP
ITOF_RET:
	${config.getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${config.getName("STI")} ${IREGS[0]}, ${config.frameReg}, 0
	${fldi(FREGS[0], config.frameReg, 0)}
	${fsub(FREGS[0], FREGS[0], FREGS[1])}
	${config.getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${_return()}
ITOF_SMALL:
	${config.getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${config.getName("STI")} ${IREGS[0]}, ${config.frameReg}, 0
	${fldi(FREGS[0], config.frameReg, 0)}
	${fsub(FREGS[0], FREGS[0], FREGS[1])}
	${_return()}
ITOF_NEGATIVE_MAIN:
	${config.getName("SUB")} ${IREGS[0]}, ${config.zeroReg}, ${IREGS[0]}
	${call("ITOF_MAIN")}
	${config.getName("FNEG")} ${FREGS[0]}, ${FREGS[0]}
	${_return()}

${config.comment} * int_of_float
min_caml_int_of_float:
	${config.comment} ${FREGS[1]} <- 0.0
	${config.comment} fset ${FREGS[1]}, 0.0
	${fset(FREGS[1], 0, 0, 0)}
	${config.getName("FBLT")} ${FREGS[0]}, ${FREGS[1]}, FTOI_NEGATIVE_MAIN			${config.comment} if (0.0 <= ${FREGS[0]}) goto FTOI_MAIN
FTOI_POSITIVE_MAIN:
	${call("min_caml_floor")}
	${config.comment} ${FREGS[2]} <- 8388608.0(0x4b000000)
	${fset(FREGS[2], 19200, 0, 0)}
	${config.comment} ${IREGS[1]} <- 0x4b000000
	${config.getName("SETHI")} ${IREGS[1]}, 19200
	${config.getName("SETLO")} ${IREGS[1]}, 0
	${config.getName("FBLT")} ${FREGS[0]}, ${FREGS[2]}, FTOI_SMALL		${config.comment} if (MAGICF <= ${FREGS[0]}) goto FTOI_BIG
	${config.comment} ${IREGS[2]} <- 0x00800000
	${config.getName("SETHI")} ${IREGS[2]}, 128
	${config.getName("SETLO")} ${IREGS[2]}, 0
	${config.getName("MOV")} ${IREGS[0]}, ${config.zeroReg}
FTOI_LOOP:
	${fsub(FREGS[0], FREGS[0], FREGS[2])}
	${config.getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[2]}
	${config.getName("FBLT")} ${FREGS[0]}, ${FREGS[2]}, FTOI_RET
	${config.getName("BRANCH")} FTOI_LOOP
FTOI_RET:
	${config.getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${fsti(FREGS[0], config.frameReg, 0)}
	${config.getName("LDI")} ${IREGS[2]}, ${config.frameReg}, 0
	${config.getName("SUB")} ${IREGS[2]}, ${IREGS[2]}, ${IREGS[1]}
	${config.getName("ADD")} ${IREGS[0]}, ${IREGS[2]}, ${IREGS[0]}
	${_return()}
FTOI_SMALL:
	${config.getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${fsti(FREGS[0], config.frameReg, 0)}
	${config.getName("LDI")} ${IREGS[0]}, ${config.frameReg}, 0
	${config.getName("SUB")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${_return()}
FTOI_NEGATIVE_MAIN:
	${config.getName("FNEG")} ${FREGS[0]}, ${FREGS[0]}
	${call("FTOI_POSITIVE_MAIN")}
	${config.getName("SUB")} ${IREGS[0]}, ${config.zeroReg}, ${IREGS[0]}
	${_return()}
	
${config.comment} * truncate
min_caml_truncate:
	${config.getName("BRANCH")} min_caml_int_of_float
	
${config.comment} ビッグエンディアン
min_caml_read_int:
	${config.getName("ADD")} ${IREGS[0]}, ${config.zeroReg}, ${config.zeroReg}
	${config.comment} 24 - 31
	${config.getName("INPUTBYTE")} ${IREGS[1]}
	${config.getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${config.getName("SLLI")} ${IREGS[0]}, ${IREGS[0]}, 8
	${config.comment} 16 - 23
	${config.getName("INPUTBYTE")} ${IREGS[1]}
	${config.getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${config.getName("SLLI")} ${IREGS[0]}, ${IREGS[0]}, 8
	${config.comment} 8 - 15
	${config.getName("INPUTBYTE")} ${IREGS[1]}
	${config.getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${config.getName("SLLI")} ${IREGS[0]}, ${IREGS[0]}, 8
	${config.comment} 0 - 7
	${config.getName("INPUTBYTE")} ${IREGS[1]}
	${config.getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${_return()}

min_caml_read_float:
	${call("min_caml_read_int")}
	${config.getName("STI")} ${IREGS[0]}, ${config.frameReg}, 0
	${fldi(FREGS[0], config.frameReg, 0)}
	${_return()}

${config.comment}----------------------------------------------------------------------
${config.comment}
${config.comment} lib_asm.s
${config.comment}
${config.comment}----------------------------------------------------------------------

